{"version":3,"sources":["actions/index.js","components/Searchrecipes.js","components/Recipeitem.js","components/Recipelist.js","components/Favoriterecipelist.js","components/App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["SET_RECIPES","FAVORITE_RECIPES","Searchrecipes","state","ingredients","dish","url","this","console","log","fetch","method","then","response","json","props","setRecipes","results","Form","inline","FormGroup","FormLabel","FormControl","type","placeholder","onChange","event","setState","target","value","Button","onClick","searchOnClick","Component","connect","items","RecipeItem","favorited","item","favoriteRecipes","thumbnail","length","className","favoriteBtn","favorite","href","title","src","alt","recipes","RecipeList","to","map","recipe","index","key","Favoriterecipelist","myfavoriteRecipes","App","Recipelist","Boolean","window","location","hostname","match","rootReducer","combineReducers","action","store","createStore","subscribe","getState","ReactDOM","render","basename","exact","path","component","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a50be173.chunk.js","sourcesContent":["export const SET_RECIPES = 'SET_RECIPES';\r\nexport const FAVORITE_RECIPES = 'FAVORITE_RECIPES';\r\n\r\nexport function setRecipes(items){\r\n    return{\r\n        type: SET_RECIPES,\r\n        items\r\n    }\r\n}\r\n\r\nexport function favoriteRecipes(recipes){\r\n    console.log('make this fav ', recipes);\r\n    return {\r\n        type: FAVORITE_RECIPES,\r\n        recipes\r\n    }\r\n}","import React, {Component} from 'react';\r\nimport { Form, FormGroup, FormControl, FormLabel , Button } from 'react-bootstrap';\r\n\r\nimport {connect} from 'react-redux';\r\nimport {setRecipes} from '../actions';\r\n\r\nclass Searchrecipes extends Component{\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            ingredients: '',\r\n            dish: ''\r\n        }\r\n    }\r\n\r\n    searchOnClick(){\r\n        const url = `http://www.recipepuppy.com/api/?i=${this.state.ingredients}&q=${this.state.dish}`;\r\n        console.log('current url', url);\r\n\r\n        fetch(url, {\r\n            method: 'GET'\r\n        }).then( response => response.json())\r\n          .then( json => this.props.setRecipes(json.results))\r\n    }\r\n    render(){\r\n        return(\r\n            \r\n            <Form inline>\r\n                {'  '}\r\n                <FormGroup>\r\n                    <FormLabel >Ingredients</FormLabel >\r\n                    {' '}\r\n                    <FormControl type=\"text\" placeholder=\"garlic, chicken\"\r\n                    onChange={event => \r\n                        this.setState({ingredients: event.target.value})\r\n                    } />\r\n                </FormGroup>\r\n                    {' '}\r\n                <FormGroup>\r\n                    <FormLabel >Dish</FormLabel >\r\n                        {' '}\r\n                    <FormControl type=\"text\" placeholder=\"adobo\" \r\n                    onChange={event => \r\n                        this.setState({dish: event.target.value})\r\n                    } />\r\n                </FormGroup>\r\n                {' '}\r\n\r\n                <Button onClick={() => this.searchOnClick()}>Submit</Button>\r\n                {'  '}\r\n            </Form>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null, {setRecipes})(Searchrecipes);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport {favoriteRecipes} from '../actions';\r\n\r\nclass RecipeItem extends Component {\r\n\r\n    constructor(){\r\n        super();\r\n\r\n        this.state = {\r\n            favorited: false\r\n        }\r\n    }\r\n\r\n    favorite(item){\r\n        this.props.favoriteRecipes(item);\r\n        this.setState({favorited: true});\r\n    }\r\n\r\n    render(){\r\n        let { item } = this.props;\r\n        item.thumbnail =  item.thumbnail.length === 0 ? \"https://icon-library.net/images/food-icon-png/food-icon-png-25.jpg\" : item.thumbnail ;\r\n\r\n        return (\r\n            <div className=\"recipe-item\">\r\n                {\r\n                this.props.favoriteBtn ?\r\n                (this.state.favorited ? \r\n                    <div className=\"star\">&#9733;</div>:\r\n                    <div className=\"star\" onClick={() => this.favorite(item)}> &#9734; </div>\r\n                ) : null \r\n                }\r\n                \r\n            <div className=\"recipe-text\">\r\n                <a href={item.href}>\r\n                    <h4>{item.title}</h4>\r\n                </a>\r\n                <p>{item.ingredients}</p>\r\n            </div>\r\n            <img src={item.thumbnail} alt={item.title} className=\"recipe-img\"></img>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default connect(null,{favoriteRecipes})(RecipeItem);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport RecipeItem from './Recipeitem';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass RecipeList extends Component {\r\n    render(){\r\n        return(\r\n            <div>\r\n                {this.props.favoriteRecipes.length > 0 ?\r\n                <h4 className=\"link\">\r\n                    <Link to=\"/favorites\">Favorites</Link>\r\n                </h4>: null}\r\n                {\r\n                    this.props.recipes.map((recipe, index) => {\r\n                    return(\r\n                        <RecipeItem key={index} item={recipe} favoriteBtn={true}></RecipeItem>\r\n                    )\r\n                    }) \r\n                }\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    return state;\r\n}\r\n\r\nexport default connect(mapStateToProps,null)(RecipeList);","import React, {Component} from 'react';\r\nimport {connect} from 'react-redux';\r\nimport RecipeItem from './Recipeitem';\r\nimport { Link } from 'react-router-dom';\r\n\r\nclass Favoriterecipelist extends Component {\r\n    render(){\r\n        console.log('prop inside favt', this.props.myfavoriteRecipes);\r\n        return (\r\n            <div>\r\n                <h4>\r\n                    <Link to=\"/\">Home</Link>\r\n                </h4>\r\n                <h4>Favorite Recipes</h4>\r\n                {\r\n                    this.props.favoriteRecipes.map((recipe, index) => {\r\n                        console.log('fvt: ', recipe);\r\n                        return(\r\n                            <RecipeItem key={index} item={recipe} favoriteBtn={false} ></RecipeItem>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nfunction mapStateToProps(state){\r\n    console.log('state to map', state);\r\n    return {\r\n        favoriteRecipes: state.favoriteRecipes\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, null)(Favoriterecipelist)","import React, {Component} from 'react';\nimport './App.css';\nimport Searchrecipes from './Searchrecipes';\nimport '../styles/index.css'\nimport Recipelist from './Recipelist';\nimport Favoriterecipelist from './Favoriterecipelist';\n\nclass App extends Component {\n  render(){\n    return (\n      <div>\n        <h2>Recipe Finder</h2>\n\n        <Searchrecipes></Searchrecipes>\n\n        <Recipelist></Recipelist>\n\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SET_RECIPES, FAVORITE_RECIPES } from '../actions/index';\r\nimport { combineReducers } from 'redux';\r\n\r\n\r\nfunction recipes(state=[], action){\r\n    //console.log('recipes reducer item value  ', action.items);\r\n    switch(action.type){\r\n        case SET_RECIPES:\r\n            return action.items;\r\n\r\n            default:\r\n                return state;\r\n    }\r\n}\r\n\r\nfunction favoriteRecipes(state=[], action){\r\n    switch(action.type){\r\n        case FAVORITE_RECIPES:\r\n            state = [...state,action.recipes];\r\n            return state;\r\n        \r\n        default:\r\n            return state;\r\n\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({ recipes, favoriteRecipes });\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport Favoriterecipelist from './components/Favoriterecipelist';\nimport * as serviceWorker from './serviceWorker';\n\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './reducers'\nimport {BrowserRouter, Switch, Route } from 'react-router-dom';\n\nconst store= createStore(rootReducer);\n store.subscribe(() => console.log(store.getState()));\n\nReactDOM.render(\n                <Provider store={store}>\n                    <BrowserRouter basename=\"/\">\n                        <Switch>\n                            <Route exact path=\"/\" component={App} />\n                            <Route path=\"/favorites\" component={Favoriterecipelist} />\n                            \n                        </Switch>\n                    </BrowserRouter>\n                </Provider>\n                , document.getElementById('root')\n            );\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}